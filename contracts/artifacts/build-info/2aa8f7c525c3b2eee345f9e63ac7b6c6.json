{
	"id": "2aa8f7c525c3b2eee345f9e63ac7b6c6",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.5.17",
	"solcLongVersion": "0.5.17+commit.d19bba13",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/StringLength.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// Source:\n// https://github.com/ensdomains/ens-contracts/blob/master/contracts/ethregistrar/StringUtils.sol\npragma solidity ^0.5.0;\ncontract StringLength {\n    /**\n     * @dev Returns the length of a given string\n     *\n     * @param s The string to measure the length of\n     * @return The length of the input string\n     */\n    function strlen(string calldata s) external pure returns (bool) {\n        uint256 len;\n        uint256 i = 0;\n        uint256 bytelength = bytes(s).length;\n        bytes1 char = bytes(s)[0];\n        if(\n            !(char >= 0x41 && char <= 0x5A) && //A-Z\n            !(char >= 0x61 && char <= 0x7A) //a-z\n        )\n            return false;\n\n        for (len = 0; i < bytelength; len++) {\n            bytes1 b = bytes(s)[i];\n            if (b < 0x80) {\n                i += 1;\n            } else if (b < 0xE0) {\n                i += 2;\n            } else if (b < 0xF0) {\n                i += 3;\n            } else if (b < 0xF8) {\n                i += 4;\n            } else if (b < 0xFC) {\n                i += 5;\n            } else {\n                i += 6;\n            }\n        }\n\n        \n        return len == 9;\n    }\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/StringLength.sol": {
				"StringLength": {
					"abi": [
						{
							"constant": true,
							"inputs": [
								{
									"internalType": "string",
									"name": "s",
									"type": "string"
								}
							],
							"name": "strlen",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"methods": {
							"strlen(string)": {
								"details": "Returns the length of a given string",
								"params": {
									"s": "The string to measure the length of"
								},
								"return": "The length of the input string"
							}
						}
					},
					"evm": {
						"assembly": "    /* \"contracts/StringLength.sol\":165:1188  contract StringLength {... */\n  mstore(0x40, 0x80)\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x00\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n    /* \"contracts/StringLength.sol\":165:1188  contract StringLength {... */\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/StringLength.sol\":165:1188  contract StringLength {... */\n      mstore(0x40, 0x80)\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_1\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_1:\n        /* \"contracts/StringLength.sol\":165:1188  contract StringLength {... */\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x367bbd78\n      eq\n      tag_3\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/StringLength.sol\":363:1186  function strlen(string calldata s) external pure returns (bool) {... */\n    tag_3:\n      tag_4\n      0x04\n      dup1\n      calldatasize\n      sub\n        /* \"--CODEGEN--\":13:15   */\n      0x20\n        /* \"--CODEGEN--\":8:11   */\n      dup2\n        /* \"--CODEGEN--\":5:16   */\n      lt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_5\n      jumpi\n        /* \"--CODEGEN--\":29:30   */\n      0x00\n        /* \"--CODEGEN--\":26:27   */\n      dup1\n        /* \"--CODEGEN--\":19:31   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_5:\n        /* \"contracts/StringLength.sol\":363:1186  function strlen(string calldata s) external pure returns (bool) {... */\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n        /* \"--CODEGEN--\":21:32   */\n      0x0100000000\n        /* \"--CODEGEN--\":8:19   */\n      dup2\n        /* \"--CODEGEN--\":5:33   */\n      gt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_6\n      jumpi\n        /* \"--CODEGEN--\":46:47   */\n      0x00\n        /* \"--CODEGEN--\":43:44   */\n      dup1\n        /* \"--CODEGEN--\":36:48   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_6:\n        /* \"contracts/StringLength.sol\":363:1186  function strlen(string calldata s) external pure returns (bool) {... */\n      dup3\n      add\n        /* \"--CODEGEN--\":35:44   */\n      dup4\n        /* \"--CODEGEN--\":28:32   */\n      0x20\n        /* \"--CODEGEN--\":12:26   */\n      dup3\n        /* \"--CODEGEN--\":8:33   */\n      add\n        /* \"--CODEGEN--\":5:45   */\n      gt\n        /* \"--CODEGEN--\":2:4   */\n      iszero\n      tag_7\n      jumpi\n        /* \"--CODEGEN--\":58:59   */\n      0x00\n        /* \"--CODEGEN--\":55:56   */\n      dup1\n        /* \"--CODEGEN--\":48:60   */\n      revert\n        /* \"--CODEGEN--\":2:4   */\n    tag_7:\n        /* \"contracts/StringLength.sol\":363:1186  function strlen(string calldata s) external pure returns (bool) {... */\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap2\n        /* \"--CODEGEN--\":100:109   */\n      dup5\n        /* \"--CODEGEN--\":95:96   */\n      0x01\n        /* \"--CODEGEN--\":81:93   */\n      dup4\n        /* \"--CODEGEN--\":77:97   */\n      mul\n        /* \"--CODEGEN--\":67:75   */\n      dup5\n        /* \"--CODEGEN--\":63:98   */\n      add\n        /* \"--CODEGEN--\":60:110   */\n      gt\n        /* \"--CODEGEN--\":39:50   */\n      0x0100000000\n        /* \"--CODEGEN--\":25:37   */\n      dup4\n        /* \"--CODEGEN--\":22:51   */\n      gt\n        /* \"--CODEGEN--\":11:118   */\n      or\n        /* \"--CODEGEN--\":8:10   */\n      iszero\n      tag_8\n      jumpi\n        /* \"--CODEGEN--\":131:132   */\n      0x00\n        /* \"--CODEGEN--\":128:129   */\n      dup1\n        /* \"--CODEGEN--\":121:133   */\n      revert\n        /* \"--CODEGEN--\":8:10   */\n    tag_8:\n        /* \"contracts/StringLength.sol\":363:1186  function strlen(string calldata s) external pure returns (bool) {... */\n      swap1\n      swap2\n      swap3\n      swap4\n      swap2\n      swap3\n      swap4\n      swap1\n      pop\n      pop\n      pop\n      tag_9\n      jump\t// in\n    tag_4:\n      mload(0x40)\n      dup1\n      dup3\n      iszero\n      iszero\n      iszero\n      iszero\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n    tag_9:\n        /* \"contracts/StringLength.sol\":421:425  bool */\n      0x00\n        /* \"contracts/StringLength.sol\":437:448  uint256 len */\n      dup1\n        /* \"contracts/StringLength.sol\":458:467  uint256 i */\n      0x00\n        /* \"contracts/StringLength.sol\":470:471  0 */\n      dup1\n        /* \"contracts/StringLength.sol\":458:471  uint256 i = 0 */\n      swap1\n      pop\n        /* \"contracts/StringLength.sol\":481:499  uint256 bytelength */\n      0x00\n        /* \"contracts/StringLength.sol\":508:509  s */\n      dup6\n      dup6\n        /* \"contracts/StringLength.sol\":502:517  bytes(s).length */\n      swap1\n      pop\n        /* \"contracts/StringLength.sol\":481:517  uint256 bytelength = bytes(s).length */\n      swap1\n      pop\n        /* \"contracts/StringLength.sol\":527:538  bytes1 char */\n      0x00\n        /* \"contracts/StringLength.sol\":547:548  s */\n      dup7\n      dup7\n        /* \"contracts/StringLength.sol\":550:551  0 */\n      0x00\n        /* \"contracts/StringLength.sol\":541:552  bytes(s)[0] */\n      dup2\n      dup2\n      lt\n      tag_11\n      jumpi\n      invalid\n    tag_11:\n      swap1\n      pop\n      add\n      calldataload\n      0xf8\n      shr\n      0xf8\n      shl\n        /* \"contracts/StringLength.sol\":527:552  bytes1 char = bytes(s)[0] */\n      swap1\n      pop\n        /* \"contracts/StringLength.sol\":588:592  0x41 */\n      0x41\n        /* \"contracts/StringLength.sol\":580:592  char >= 0x41 */\n      0xf8\n      shl\n        /* \"contracts/StringLength.sol\":580:584  char */\n      dup2\n        /* \"contracts/StringLength.sol\":580:592  char >= 0x41 */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      lt\n      iszero\n        /* \"contracts/StringLength.sol\":580:608  char >= 0x41 && char <= 0x5A */\n      dup1\n      iszero\n      tag_12\n      jumpi\n      pop\n        /* \"contracts/StringLength.sol\":604:608  0x5A */\n      0x5a\n        /* \"contracts/StringLength.sol\":596:608  char <= 0x5A */\n      0xf8\n      shl\n        /* \"contracts/StringLength.sol\":596:600  char */\n      dup2\n        /* \"contracts/StringLength.sol\":596:608  char <= 0x5A */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      gt\n      iszero\n        /* \"contracts/StringLength.sol\":580:608  char >= 0x41 && char <= 0x5A */\n    tag_12:\n        /* \"contracts/StringLength.sol\":578:609  !(char >= 0x41 && char <= 0x5A) */\n      iszero\n        /* \"contracts/StringLength.sol\":578:662  !(char >= 0x41 && char <= 0x5A) && //A-Z... */\n      dup1\n      iszero\n      tag_13\n      jumpi\n      pop\n        /* \"contracts/StringLength.sol\":641:645  0x61 */\n      0x61\n        /* \"contracts/StringLength.sol\":633:645  char >= 0x61 */\n      0xf8\n      shl\n        /* \"contracts/StringLength.sol\":633:637  char */\n      dup2\n        /* \"contracts/StringLength.sol\":633:645  char >= 0x61 */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      lt\n      iszero\n        /* \"contracts/StringLength.sol\":633:661  char >= 0x61 && char <= 0x7A */\n      dup1\n      iszero\n      tag_14\n      jumpi\n      pop\n        /* \"contracts/StringLength.sol\":657:661  0x7A */\n      0x7a\n        /* \"contracts/StringLength.sol\":649:661  char <= 0x7A */\n      0xf8\n      shl\n        /* \"contracts/StringLength.sol\":649:653  char */\n      dup2\n        /* \"contracts/StringLength.sol\":649:661  char <= 0x7A */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      gt\n      iszero\n        /* \"contracts/StringLength.sol\":633:661  char >= 0x61 && char <= 0x7A */\n    tag_14:\n        /* \"contracts/StringLength.sol\":631:662  !(char >= 0x61 && char <= 0x7A) */\n      iszero\n        /* \"contracts/StringLength.sol\":578:662  !(char >= 0x41 && char <= 0x5A) && //A-Z... */\n    tag_13:\n        /* \"contracts/StringLength.sol\":562:703  if(... */\n      iszero\n      tag_15\n      jumpi\n        /* \"contracts/StringLength.sol\":698:703  false */\n      0x00\n        /* \"contracts/StringLength.sol\":691:703  return false */\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump(tag_10)\n        /* \"contracts/StringLength.sol\":562:703  if(... */\n    tag_15:\n        /* \"contracts/StringLength.sol\":725:726  0 */\n      0x00\n        /* \"contracts/StringLength.sol\":719:726  len = 0 */\n      swap4\n      pop\n        /* \"contracts/StringLength.sol\":714:1145  for (len = 0; i < bytelength; len++) {... */\n    tag_16:\n        /* \"contracts/StringLength.sol\":732:742  bytelength */\n      dup2\n        /* \"contracts/StringLength.sol\":728:729  i */\n      dup4\n        /* \"contracts/StringLength.sol\":728:742  i < bytelength */\n      lt\n        /* \"contracts/StringLength.sol\":714:1145  for (len = 0; i < bytelength; len++) {... */\n      iszero\n      tag_17\n      jumpi\n        /* \"contracts/StringLength.sol\":765:773  bytes1 b */\n      0x00\n        /* \"contracts/StringLength.sol\":782:783  s */\n      dup8\n      dup8\n        /* \"contracts/StringLength.sol\":785:786  i */\n      dup6\n        /* \"contracts/StringLength.sol\":776:787  bytes(s)[i] */\n      dup2\n      dup2\n      lt\n      tag_19\n      jumpi\n      invalid\n    tag_19:\n      swap1\n      pop\n      add\n      calldataload\n      0xf8\n      shr\n      0xf8\n      shl\n        /* \"contracts/StringLength.sol\":765:787  bytes1 b = bytes(s)[i] */\n      swap1\n      pop\n        /* \"contracts/StringLength.sol\":809:813  0x80 */\n      0x80\n        /* \"contracts/StringLength.sol\":805:813  b < 0x80 */\n      0xf8\n      shl\n        /* \"contracts/StringLength.sol\":805:806  b */\n      dup2\n        /* \"contracts/StringLength.sol\":805:813  b < 0x80 */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      lt\n        /* \"contracts/StringLength.sol\":801:1135  if (b < 0x80) {... */\n      iszero\n      tag_20\n      jumpi\n        /* \"contracts/StringLength.sol\":838:839  1 */\n      0x01\n        /* \"contracts/StringLength.sol\":833:839  i += 1 */\n      dup5\n      add\n      swap4\n      pop\n        /* \"contracts/StringLength.sol\":801:1135  if (b < 0x80) {... */\n      jump(tag_21)\n    tag_20:\n        /* \"contracts/StringLength.sol\":868:872  0xE0 */\n      0xe0\n        /* \"contracts/StringLength.sol\":864:872  b < 0xE0 */\n      0xf8\n      shl\n        /* \"contracts/StringLength.sol\":864:865  b */\n      dup2\n        /* \"contracts/StringLength.sol\":864:872  b < 0xE0 */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      lt\n        /* \"contracts/StringLength.sol\":860:1135  if (b < 0xE0) {... */\n      iszero\n      tag_22\n      jumpi\n        /* \"contracts/StringLength.sol\":897:898  2 */\n      0x02\n        /* \"contracts/StringLength.sol\":892:898  i += 2 */\n      dup5\n      add\n      swap4\n      pop\n        /* \"contracts/StringLength.sol\":860:1135  if (b < 0xE0) {... */\n      jump(tag_23)\n    tag_22:\n        /* \"contracts/StringLength.sol\":927:931  0xF0 */\n      0xf0\n        /* \"contracts/StringLength.sol\":923:931  b < 0xF0 */\n      0xf8\n      shl\n        /* \"contracts/StringLength.sol\":923:924  b */\n      dup2\n        /* \"contracts/StringLength.sol\":923:931  b < 0xF0 */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      lt\n        /* \"contracts/StringLength.sol\":919:1135  if (b < 0xF0) {... */\n      iszero\n      tag_24\n      jumpi\n        /* \"contracts/StringLength.sol\":956:957  3 */\n      0x03\n        /* \"contracts/StringLength.sol\":951:957  i += 3 */\n      dup5\n      add\n      swap4\n      pop\n        /* \"contracts/StringLength.sol\":919:1135  if (b < 0xF0) {... */\n      jump(tag_25)\n    tag_24:\n        /* \"contracts/StringLength.sol\":986:990  0xF8 */\n      0xf8\n        /* \"contracts/StringLength.sol\":982:990  b < 0xF8 */\n      dup1\n      shl\n        /* \"contracts/StringLength.sol\":982:983  b */\n      dup2\n        /* \"contracts/StringLength.sol\":982:990  b < 0xF8 */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      lt\n        /* \"contracts/StringLength.sol\":978:1135  if (b < 0xF8) {... */\n      iszero\n      tag_26\n      jumpi\n        /* \"contracts/StringLength.sol\":1015:1016  4 */\n      0x04\n        /* \"contracts/StringLength.sol\":1010:1016  i += 4 */\n      dup5\n      add\n      swap4\n      pop\n        /* \"contracts/StringLength.sol\":978:1135  if (b < 0xF8) {... */\n      jump(tag_27)\n    tag_26:\n        /* \"contracts/StringLength.sol\":1045:1049  0xFC */\n      0xfc\n        /* \"contracts/StringLength.sol\":1041:1049  b < 0xFC */\n      0xf8\n      shl\n        /* \"contracts/StringLength.sol\":1041:1042  b */\n      dup2\n        /* \"contracts/StringLength.sol\":1041:1049  b < 0xFC */\n      not(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n      and\n      lt\n        /* \"contracts/StringLength.sol\":1037:1135  if (b < 0xFC) {... */\n      iszero\n      tag_28\n      jumpi\n        /* \"contracts/StringLength.sol\":1074:1075  5 */\n      0x05\n        /* \"contracts/StringLength.sol\":1069:1075  i += 5 */\n      dup5\n      add\n      swap4\n      pop\n        /* \"contracts/StringLength.sol\":1037:1135  if (b < 0xFC) {... */\n      jump(tag_29)\n    tag_28:\n        /* \"contracts/StringLength.sol\":1119:1120  6 */\n      0x06\n        /* \"contracts/StringLength.sol\":1114:1120  i += 6 */\n      dup5\n      add\n      swap4\n      pop\n        /* \"contracts/StringLength.sol\":1037:1135  if (b < 0xFC) {... */\n    tag_29:\n        /* \"contracts/StringLength.sol\":978:1135  if (b < 0xF8) {... */\n    tag_27:\n        /* \"contracts/StringLength.sol\":919:1135  if (b < 0xF0) {... */\n    tag_25:\n        /* \"contracts/StringLength.sol\":860:1135  if (b < 0xE0) {... */\n    tag_23:\n        /* \"contracts/StringLength.sol\":801:1135  if (b < 0x80) {... */\n    tag_21:\n        /* \"contracts/StringLength.sol\":714:1145  for (len = 0; i < bytelength; len++) {... */\n      pop\n        /* \"contracts/StringLength.sol\":744:749  len++ */\n      dup4\n      dup1\n      0x01\n      add\n      swap5\n      pop\n      pop\n        /* \"contracts/StringLength.sol\":714:1145  for (len = 0; i < bytelength; len++) {... */\n      jump(tag_16)\n    tag_17:\n        /* \"contracts/StringLength.sol\":1178:1179  9 */\n      0x09\n        /* \"contracts/StringLength.sol\":1171:1174  len */\n      dup5\n        /* \"contracts/StringLength.sol\":1171:1179  len == 9 */\n      eq\n        /* \"contracts/StringLength.sol\":1164:1179  return len == 9 */\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts/StringLength.sol\":363:1186  function strlen(string calldata s) external pure returns (bool) {... */\n    tag_10:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa265627a7a723158207b73d1c135720e068a51c9120ec3e8c4108c9fd98a1812a67f18d31a908eee5764736f6c63430005110032\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50610362806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063367bbd7814610030575b600080fd5b6100a76004803603602081101561004657600080fd5b810190808035906020019064010000000081111561006357600080fd5b82018360208201111561007557600080fd5b8035906020019184600183028401116401000000008311171561009757600080fd5b90919293919293905050506100c1565b604051808215151515815260200191505060405180910390f35b600080600080905060008585905090506000868660008181106100e057fe5b9050013560f81c60f81b9050604160f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916101580156101485750605a60f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191611155b1580156101ae5750606160f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916101580156101ac5750607a60f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191611155b155b156101c0576000945050505050610327565b600093505b8183101561031c5760008787858181106101db57fe5b9050013560f81c60f81b9050608060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610156102205760018401935061030e565b60e060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610156102595760028401935061030d565b60f060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610156102925760038401935061030c565b60f8801b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610156102ca5760048401935061030b565b60fc60f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610156103035760058401935061030a565b6006840193505b5b5b5b5b5083806001019450506101c5565b600984149450505050505b9291505056fea265627a7a723158207b73d1c135720e068a51c9120ec3e8c4108c9fd98a1812a67f18d31a908eee5764736f6c63430005110032",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x362 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x367BBD78 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA7 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x46 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x63 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x75 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x97 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0xC1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 SWAP1 POP PUSH1 0x0 DUP6 DUP6 SWAP1 POP SWAP1 POP PUSH1 0x0 DUP7 DUP7 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0xE0 JUMPI INVALID JUMPDEST SWAP1 POP ADD CALLDATALOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL SWAP1 POP PUSH1 0x41 PUSH1 0xF8 SHL DUP2 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND LT ISZERO DUP1 ISZERO PUSH2 0x148 JUMPI POP PUSH1 0x5A PUSH1 0xF8 SHL DUP2 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND GT ISZERO JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x1AE JUMPI POP PUSH1 0x61 PUSH1 0xF8 SHL DUP2 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND LT ISZERO DUP1 ISZERO PUSH2 0x1AC JUMPI POP PUSH1 0x7A PUSH1 0xF8 SHL DUP2 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND GT ISZERO JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1C0 JUMPI PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x327 JUMP JUMPDEST PUSH1 0x0 SWAP4 POP JUMPDEST DUP2 DUP4 LT ISZERO PUSH2 0x31C JUMPI PUSH1 0x0 DUP8 DUP8 DUP6 DUP2 DUP2 LT PUSH2 0x1DB JUMPI INVALID JUMPDEST SWAP1 POP ADD CALLDATALOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL SWAP1 POP PUSH1 0x80 PUSH1 0xF8 SHL DUP2 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND LT ISZERO PUSH2 0x220 JUMPI PUSH1 0x1 DUP5 ADD SWAP4 POP PUSH2 0x30E JUMP JUMPDEST PUSH1 0xE0 PUSH1 0xF8 SHL DUP2 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND LT ISZERO PUSH2 0x259 JUMPI PUSH1 0x2 DUP5 ADD SWAP4 POP PUSH2 0x30D JUMP JUMPDEST PUSH1 0xF0 PUSH1 0xF8 SHL DUP2 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND LT ISZERO PUSH2 0x292 JUMPI PUSH1 0x3 DUP5 ADD SWAP4 POP PUSH2 0x30C JUMP JUMPDEST PUSH1 0xF8 DUP1 SHL DUP2 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND LT ISZERO PUSH2 0x2CA JUMPI PUSH1 0x4 DUP5 ADD SWAP4 POP PUSH2 0x30B JUMP JUMPDEST PUSH1 0xFC PUSH1 0xF8 SHL DUP2 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND LT ISZERO PUSH2 0x303 JUMPI PUSH1 0x5 DUP5 ADD SWAP4 POP PUSH2 0x30A JUMP JUMPDEST PUSH1 0x6 DUP5 ADD SWAP4 POP JUMPDEST JUMPDEST JUMPDEST JUMPDEST JUMPDEST POP DUP4 DUP1 PUSH1 0x1 ADD SWAP5 POP POP PUSH2 0x1C5 JUMP JUMPDEST PUSH1 0x9 DUP5 EQ SWAP5 POP POP POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 PUSH28 0x73D1C135720E068A51C9120EC3E8C4108C9FD98A1812A67F18D31A90 DUP15 0xEE JUMPI PUSH5 0x736F6C6343 STOP SDIV GT STOP ORIGIN ",
							"sourceMap": "165:1023:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;165:1023:0;;;;;;;"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506004361061002b5760003560e01c8063367bbd7814610030575b600080fd5b6100a76004803603602081101561004657600080fd5b810190808035906020019064010000000081111561006357600080fd5b82018360208201111561007557600080fd5b8035906020019184600183028401116401000000008311171561009757600080fd5b90919293919293905050506100c1565b604051808215151515815260200191505060405180910390f35b600080600080905060008585905090506000868660008181106100e057fe5b9050013560f81c60f81b9050604160f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916101580156101485750605a60f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191611155b1580156101ae5750606160f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916101580156101ac5750607a60f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191611155b155b156101c0576000945050505050610327565b600093505b8183101561031c5760008787858181106101db57fe5b9050013560f81c60f81b9050608060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610156102205760018401935061030e565b60e060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610156102595760028401935061030d565b60f060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610156102925760038401935061030c565b60f8801b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610156102ca5760048401935061030b565b60fc60f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610156103035760058401935061030a565b6006840193505b5b5b5b5b5083806001019450506101c5565b600984149450505050505b9291505056fea265627a7a723158207b73d1c135720e068a51c9120ec3e8c4108c9fd98a1812a67f18d31a908eee5764736f6c63430005110032",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x367BBD78 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA7 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x46 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x63 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x75 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x97 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 0xC1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 SWAP1 POP PUSH1 0x0 DUP6 DUP6 SWAP1 POP SWAP1 POP PUSH1 0x0 DUP7 DUP7 PUSH1 0x0 DUP2 DUP2 LT PUSH2 0xE0 JUMPI INVALID JUMPDEST SWAP1 POP ADD CALLDATALOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL SWAP1 POP PUSH1 0x41 PUSH1 0xF8 SHL DUP2 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND LT ISZERO DUP1 ISZERO PUSH2 0x148 JUMPI POP PUSH1 0x5A PUSH1 0xF8 SHL DUP2 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND GT ISZERO JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x1AE JUMPI POP PUSH1 0x61 PUSH1 0xF8 SHL DUP2 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND LT ISZERO DUP1 ISZERO PUSH2 0x1AC JUMPI POP PUSH1 0x7A PUSH1 0xF8 SHL DUP2 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND GT ISZERO JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1C0 JUMPI PUSH1 0x0 SWAP5 POP POP POP POP POP PUSH2 0x327 JUMP JUMPDEST PUSH1 0x0 SWAP4 POP JUMPDEST DUP2 DUP4 LT ISZERO PUSH2 0x31C JUMPI PUSH1 0x0 DUP8 DUP8 DUP6 DUP2 DUP2 LT PUSH2 0x1DB JUMPI INVALID JUMPDEST SWAP1 POP ADD CALLDATALOAD PUSH1 0xF8 SHR PUSH1 0xF8 SHL SWAP1 POP PUSH1 0x80 PUSH1 0xF8 SHL DUP2 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND LT ISZERO PUSH2 0x220 JUMPI PUSH1 0x1 DUP5 ADD SWAP4 POP PUSH2 0x30E JUMP JUMPDEST PUSH1 0xE0 PUSH1 0xF8 SHL DUP2 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND LT ISZERO PUSH2 0x259 JUMPI PUSH1 0x2 DUP5 ADD SWAP4 POP PUSH2 0x30D JUMP JUMPDEST PUSH1 0xF0 PUSH1 0xF8 SHL DUP2 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND LT ISZERO PUSH2 0x292 JUMPI PUSH1 0x3 DUP5 ADD SWAP4 POP PUSH2 0x30C JUMP JUMPDEST PUSH1 0xF8 DUP1 SHL DUP2 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND LT ISZERO PUSH2 0x2CA JUMPI PUSH1 0x4 DUP5 ADD SWAP4 POP PUSH2 0x30B JUMP JUMPDEST PUSH1 0xFC PUSH1 0xF8 SHL DUP2 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND LT ISZERO PUSH2 0x303 JUMPI PUSH1 0x5 DUP5 ADD SWAP4 POP PUSH2 0x30A JUMP JUMPDEST PUSH1 0x6 DUP5 ADD SWAP4 POP JUMPDEST JUMPDEST JUMPDEST JUMPDEST JUMPDEST POP DUP4 DUP1 PUSH1 0x1 ADD SWAP5 POP POP PUSH2 0x1C5 JUMP JUMPDEST PUSH1 0x9 DUP5 EQ SWAP5 POP POP POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 PUSH28 0x73D1C135720E068A51C9120EC3E8C4108C9FD98A1812A67F18D31A90 DUP15 0xEE JUMPI PUSH5 0x736F6C6343 STOP SDIV GT STOP ORIGIN ",
							"sourceMap": "165:1023:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;165:1023:0;;;;;;;;;;;;;;;;;;;363:823;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;363:823:0;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;363:823:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;363:823:0;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;363:823:0;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;421:4;437:11;458:9;470:1;458:13;;481:18;508:1;;502:15;;481:36;;527:11;547:1;;550;541:11;;;;;;;;;;;;;;;527:25;;588:4;580:12;;:4;:12;;;;;:28;;;;;604:4;596:12;;:4;:12;;;;;580:28;578:31;:84;;;;;641:4;633:12;;:4;:12;;;;;:28;;;;;657:4;649:12;;:4;:12;;;;;633:28;631:31;578:84;562:141;;;698:5;691:12;;;;;;;;562:141;725:1;719:7;;714:431;732:10;728:1;:14;714:431;;;765:8;782:1;;785;776:11;;;;;;;;;;;;;;;765:22;;809:4;805:8;;:1;:8;;;;801:334;;;838:1;833:6;;;;801:334;;;868:4;864:8;;:1;:8;;;;860:275;;;897:1;892:6;;;;860:275;;;927:4;923:8;;:1;:8;;;;919:216;;;956:1;951:6;;;;919:216;;;986:4;982:8;;:1;:8;;;;978:157;;;1015:1;1010:6;;;;978:157;;;1045:4;1041:8;;:1;:8;;;;1037:98;;;1074:1;1069:6;;;;1037:98;;;1119:1;1114:6;;;;1037:98;978:157;919:216;860:275;801:334;714:431;744:5;;;;;;;714:431;;;1178:1;1171:3;:8;1164:15;;;;;;363:823;;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "173200",
								"executionCost": "220",
								"totalCost": "173420"
							},
							"external": {
								"strlen(string)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 165,
									"end": 1188,
									"name": "PUSH",
									"value": "80"
								},
								{
									"begin": 165,
									"end": 1188,
									"name": "PUSH",
									"value": "40"
								},
								{
									"begin": 165,
									"end": 1188,
									"name": "MSTORE"
								},
								{
									"begin": 165,
									"end": 1188,
									"name": "CALLVALUE"
								},
								{
									"begin": 8,
									"end": 17,
									"name": "DUP1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "ISZERO"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "PUSH [tag]",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPI"
								},
								{
									"begin": 30,
									"end": 31,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 27,
									"end": 28,
									"name": "DUP1"
								},
								{
									"begin": 20,
									"end": 32,
									"name": "REVERT"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "tag",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPDEST"
								},
								{
									"begin": 165,
									"end": 1188,
									"name": "POP"
								},
								{
									"begin": 165,
									"end": 1188,
									"name": "PUSH #[$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 165,
									"end": 1188,
									"name": "DUP1"
								},
								{
									"begin": 165,
									"end": 1188,
									"name": "PUSH [$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 165,
									"end": 1188,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 165,
									"end": 1188,
									"name": "CODECOPY"
								},
								{
									"begin": 165,
									"end": 1188,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 165,
									"end": 1188,
									"name": "RETURN"
								}
							],
							".data": {
								"0": {
									".auxdata": "a265627a7a723158207b73d1c135720e068a51c9120ec3e8c4108c9fd98a1812a67f18d31a908eee5764736f6c63430005110032",
									".code": [
										{
											"begin": 165,
											"end": 1188,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 165,
											"end": 1188,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 165,
											"end": 1188,
											"name": "MSTORE"
										},
										{
											"begin": 165,
											"end": 1188,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 165,
											"end": 1188,
											"name": "POP"
										},
										{
											"begin": 165,
											"end": 1188,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 165,
											"end": 1188,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 165,
											"end": 1188,
											"name": "LT"
										},
										{
											"begin": 165,
											"end": 1188,
											"name": "PUSH [tag]",
											"value": "2"
										},
										{
											"begin": 165,
											"end": 1188,
											"name": "JUMPI"
										},
										{
											"begin": 165,
											"end": 1188,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 165,
											"end": 1188,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 165,
											"end": 1188,
											"name": "PUSH",
											"value": "E0"
										},
										{
											"begin": 165,
											"end": 1188,
											"name": "SHR"
										},
										{
											"begin": 165,
											"end": 1188,
											"name": "DUP1"
										},
										{
											"begin": 165,
											"end": 1188,
											"name": "PUSH",
											"value": "367BBD78"
										},
										{
											"begin": 165,
											"end": 1188,
											"name": "EQ"
										},
										{
											"begin": 165,
											"end": 1188,
											"name": "PUSH [tag]",
											"value": "3"
										},
										{
											"begin": 165,
											"end": 1188,
											"name": "JUMPI"
										},
										{
											"begin": 165,
											"end": 1188,
											"name": "tag",
											"value": "2"
										},
										{
											"begin": 165,
											"end": 1188,
											"name": "JUMPDEST"
										},
										{
											"begin": 165,
											"end": 1188,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 165,
											"end": 1188,
											"name": "DUP1"
										},
										{
											"begin": 165,
											"end": 1188,
											"name": "REVERT"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "tag",
											"value": "3"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "JUMPDEST"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "PUSH [tag]",
											"value": "4"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "DUP1"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "SUB"
										},
										{
											"begin": 13,
											"end": 15,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 8,
											"end": 11,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 16,
											"name": "LT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "5"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 26,
											"end": 27,
											"name": "DUP1"
										},
										{
											"begin": 19,
											"end": 31,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "5"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "DUP2"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "ADD"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "SWAP1"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "DUP1"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "DUP1"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "SWAP1"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "ADD"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "SWAP1"
										},
										{
											"begin": 21,
											"end": 32,
											"name": "PUSH",
											"value": "100000000"
										},
										{
											"begin": 8,
											"end": 19,
											"name": "DUP2"
										},
										{
											"begin": 5,
											"end": 33,
											"name": "GT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "6"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 46,
											"end": 47,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 43,
											"end": 44,
											"name": "DUP1"
										},
										{
											"begin": 36,
											"end": 48,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "6"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "DUP3"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "ADD"
										},
										{
											"begin": 35,
											"end": 44,
											"name": "DUP4"
										},
										{
											"begin": 28,
											"end": 32,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 12,
											"end": 26,
											"name": "DUP3"
										},
										{
											"begin": 8,
											"end": 33,
											"name": "ADD"
										},
										{
											"begin": 5,
											"end": 45,
											"name": "GT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "ISZERO"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "PUSH [tag]",
											"value": "7"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPI"
										},
										{
											"begin": 58,
											"end": 59,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 55,
											"end": 56,
											"name": "DUP1"
										},
										{
											"begin": 48,
											"end": 60,
											"name": "REVERT"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "tag",
											"value": "7"
										},
										{
											"begin": 2,
											"end": 4,
											"name": "JUMPDEST"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "DUP1"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "SWAP1"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "ADD"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "SWAP2"
										},
										{
											"begin": 100,
											"end": 109,
											"name": "DUP5"
										},
										{
											"begin": 95,
											"end": 96,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 81,
											"end": 93,
											"name": "DUP4"
										},
										{
											"begin": 77,
											"end": 97,
											"name": "MUL"
										},
										{
											"begin": 67,
											"end": 75,
											"name": "DUP5"
										},
										{
											"begin": 63,
											"end": 98,
											"name": "ADD"
										},
										{
											"begin": 60,
											"end": 110,
											"name": "GT"
										},
										{
											"begin": 39,
											"end": 50,
											"name": "PUSH",
											"value": "100000000"
										},
										{
											"begin": 25,
											"end": 37,
											"name": "DUP4"
										},
										{
											"begin": 22,
											"end": 51,
											"name": "GT"
										},
										{
											"begin": 11,
											"end": 118,
											"name": "OR"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "PUSH [tag]",
											"value": "8"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "JUMPI"
										},
										{
											"begin": 131,
											"end": 132,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 128,
											"end": 129,
											"name": "DUP1"
										},
										{
											"begin": 121,
											"end": 133,
											"name": "REVERT"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "tag",
											"value": "8"
										},
										{
											"begin": 8,
											"end": 10,
											"name": "JUMPDEST"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "SWAP1"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "SWAP2"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "SWAP3"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "SWAP4"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "SWAP2"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "SWAP3"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "SWAP4"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "SWAP1"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "POP"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "POP"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "POP"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "PUSH [tag]",
											"value": "9"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "tag",
											"value": "4"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "JUMPDEST"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "MLOAD"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "DUP1"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "DUP3"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "ISZERO"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "ISZERO"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "ISZERO"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "ISZERO"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "DUP2"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "MSTORE"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "ADD"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "SWAP2"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "POP"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "POP"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "MLOAD"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "DUP1"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "SWAP2"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "SUB"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "SWAP1"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "RETURN"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "tag",
											"value": "9"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "JUMPDEST"
										},
										{
											"begin": 421,
											"end": 425,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 437,
											"end": 448,
											"name": "DUP1"
										},
										{
											"begin": 458,
											"end": 467,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 470,
											"end": 471,
											"name": "DUP1"
										},
										{
											"begin": 458,
											"end": 471,
											"name": "SWAP1"
										},
										{
											"begin": 458,
											"end": 471,
											"name": "POP"
										},
										{
											"begin": 481,
											"end": 499,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 508,
											"end": 509,
											"name": "DUP6"
										},
										{
											"begin": 508,
											"end": 509,
											"name": "DUP6"
										},
										{
											"begin": 502,
											"end": 517,
											"name": "SWAP1"
										},
										{
											"begin": 502,
											"end": 517,
											"name": "POP"
										},
										{
											"begin": 481,
											"end": 517,
											"name": "SWAP1"
										},
										{
											"begin": 481,
											"end": 517,
											"name": "POP"
										},
										{
											"begin": 527,
											"end": 538,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 547,
											"end": 548,
											"name": "DUP7"
										},
										{
											"begin": 547,
											"end": 548,
											"name": "DUP7"
										},
										{
											"begin": 550,
											"end": 551,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 541,
											"end": 552,
											"name": "DUP2"
										},
										{
											"begin": 541,
											"end": 552,
											"name": "DUP2"
										},
										{
											"begin": 541,
											"end": 552,
											"name": "LT"
										},
										{
											"begin": 541,
											"end": 552,
											"name": "PUSH [tag]",
											"value": "11"
										},
										{
											"begin": 541,
											"end": 552,
											"name": "JUMPI"
										},
										{
											"begin": 541,
											"end": 552,
											"name": "INVALID"
										},
										{
											"begin": 541,
											"end": 552,
											"name": "tag",
											"value": "11"
										},
										{
											"begin": 541,
											"end": 552,
											"name": "JUMPDEST"
										},
										{
											"begin": 541,
											"end": 552,
											"name": "SWAP1"
										},
										{
											"begin": 541,
											"end": 552,
											"name": "POP"
										},
										{
											"begin": 541,
											"end": 552,
											"name": "ADD"
										},
										{
											"begin": 541,
											"end": 552,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 541,
											"end": 552,
											"name": "PUSH",
											"value": "F8"
										},
										{
											"begin": 541,
											"end": 552,
											"name": "SHR"
										},
										{
											"begin": 541,
											"end": 552,
											"name": "PUSH",
											"value": "F8"
										},
										{
											"begin": 541,
											"end": 552,
											"name": "SHL"
										},
										{
											"begin": 527,
											"end": 552,
											"name": "SWAP1"
										},
										{
											"begin": 527,
											"end": 552,
											"name": "POP"
										},
										{
											"begin": 588,
											"end": 592,
											"name": "PUSH",
											"value": "41"
										},
										{
											"begin": 580,
											"end": 592,
											"name": "PUSH",
											"value": "F8"
										},
										{
											"begin": 580,
											"end": 592,
											"name": "SHL"
										},
										{
											"begin": 580,
											"end": 584,
											"name": "DUP2"
										},
										{
											"begin": 580,
											"end": 592,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 580,
											"end": 592,
											"name": "NOT"
										},
										{
											"begin": 580,
											"end": 592,
											"name": "AND"
										},
										{
											"begin": 580,
											"end": 592,
											"name": "LT"
										},
										{
											"begin": 580,
											"end": 592,
											"name": "ISZERO"
										},
										{
											"begin": 580,
											"end": 608,
											"name": "DUP1"
										},
										{
											"begin": 580,
											"end": 608,
											"name": "ISZERO"
										},
										{
											"begin": 580,
											"end": 608,
											"name": "PUSH [tag]",
											"value": "12"
										},
										{
											"begin": 580,
											"end": 608,
											"name": "JUMPI"
										},
										{
											"begin": 580,
											"end": 608,
											"name": "POP"
										},
										{
											"begin": 604,
											"end": 608,
											"name": "PUSH",
											"value": "5A"
										},
										{
											"begin": 596,
											"end": 608,
											"name": "PUSH",
											"value": "F8"
										},
										{
											"begin": 596,
											"end": 608,
											"name": "SHL"
										},
										{
											"begin": 596,
											"end": 600,
											"name": "DUP2"
										},
										{
											"begin": 596,
											"end": 608,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 596,
											"end": 608,
											"name": "NOT"
										},
										{
											"begin": 596,
											"end": 608,
											"name": "AND"
										},
										{
											"begin": 596,
											"end": 608,
											"name": "GT"
										},
										{
											"begin": 596,
											"end": 608,
											"name": "ISZERO"
										},
										{
											"begin": 580,
											"end": 608,
											"name": "tag",
											"value": "12"
										},
										{
											"begin": 580,
											"end": 608,
											"name": "JUMPDEST"
										},
										{
											"begin": 578,
											"end": 609,
											"name": "ISZERO"
										},
										{
											"begin": 578,
											"end": 662,
											"name": "DUP1"
										},
										{
											"begin": 578,
											"end": 662,
											"name": "ISZERO"
										},
										{
											"begin": 578,
											"end": 662,
											"name": "PUSH [tag]",
											"value": "13"
										},
										{
											"begin": 578,
											"end": 662,
											"name": "JUMPI"
										},
										{
											"begin": 578,
											"end": 662,
											"name": "POP"
										},
										{
											"begin": 641,
											"end": 645,
											"name": "PUSH",
											"value": "61"
										},
										{
											"begin": 633,
											"end": 645,
											"name": "PUSH",
											"value": "F8"
										},
										{
											"begin": 633,
											"end": 645,
											"name": "SHL"
										},
										{
											"begin": 633,
											"end": 637,
											"name": "DUP2"
										},
										{
											"begin": 633,
											"end": 645,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 633,
											"end": 645,
											"name": "NOT"
										},
										{
											"begin": 633,
											"end": 645,
											"name": "AND"
										},
										{
											"begin": 633,
											"end": 645,
											"name": "LT"
										},
										{
											"begin": 633,
											"end": 645,
											"name": "ISZERO"
										},
										{
											"begin": 633,
											"end": 661,
											"name": "DUP1"
										},
										{
											"begin": 633,
											"end": 661,
											"name": "ISZERO"
										},
										{
											"begin": 633,
											"end": 661,
											"name": "PUSH [tag]",
											"value": "14"
										},
										{
											"begin": 633,
											"end": 661,
											"name": "JUMPI"
										},
										{
											"begin": 633,
											"end": 661,
											"name": "POP"
										},
										{
											"begin": 657,
											"end": 661,
											"name": "PUSH",
											"value": "7A"
										},
										{
											"begin": 649,
											"end": 661,
											"name": "PUSH",
											"value": "F8"
										},
										{
											"begin": 649,
											"end": 661,
											"name": "SHL"
										},
										{
											"begin": 649,
											"end": 653,
											"name": "DUP2"
										},
										{
											"begin": 649,
											"end": 661,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 649,
											"end": 661,
											"name": "NOT"
										},
										{
											"begin": 649,
											"end": 661,
											"name": "AND"
										},
										{
											"begin": 649,
											"end": 661,
											"name": "GT"
										},
										{
											"begin": 649,
											"end": 661,
											"name": "ISZERO"
										},
										{
											"begin": 633,
											"end": 661,
											"name": "tag",
											"value": "14"
										},
										{
											"begin": 633,
											"end": 661,
											"name": "JUMPDEST"
										},
										{
											"begin": 631,
											"end": 662,
											"name": "ISZERO"
										},
										{
											"begin": 578,
											"end": 662,
											"name": "tag",
											"value": "13"
										},
										{
											"begin": 578,
											"end": 662,
											"name": "JUMPDEST"
										},
										{
											"begin": 562,
											"end": 703,
											"name": "ISZERO"
										},
										{
											"begin": 562,
											"end": 703,
											"name": "PUSH [tag]",
											"value": "15"
										},
										{
											"begin": 562,
											"end": 703,
											"name": "JUMPI"
										},
										{
											"begin": 698,
											"end": 703,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 691,
											"end": 703,
											"name": "SWAP5"
										},
										{
											"begin": 691,
											"end": 703,
											"name": "POP"
										},
										{
											"begin": 691,
											"end": 703,
											"name": "POP"
										},
										{
											"begin": 691,
											"end": 703,
											"name": "POP"
										},
										{
											"begin": 691,
											"end": 703,
											"name": "POP"
										},
										{
											"begin": 691,
											"end": 703,
											"name": "POP"
										},
										{
											"begin": 691,
											"end": 703,
											"name": "PUSH [tag]",
											"value": "10"
										},
										{
											"begin": 691,
											"end": 703,
											"name": "JUMP"
										},
										{
											"begin": 562,
											"end": 703,
											"name": "tag",
											"value": "15"
										},
										{
											"begin": 562,
											"end": 703,
											"name": "JUMPDEST"
										},
										{
											"begin": 725,
											"end": 726,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 719,
											"end": 726,
											"name": "SWAP4"
										},
										{
											"begin": 719,
											"end": 726,
											"name": "POP"
										},
										{
											"begin": 714,
											"end": 1145,
											"name": "tag",
											"value": "16"
										},
										{
											"begin": 714,
											"end": 1145,
											"name": "JUMPDEST"
										},
										{
											"begin": 732,
											"end": 742,
											"name": "DUP2"
										},
										{
											"begin": 728,
											"end": 729,
											"name": "DUP4"
										},
										{
											"begin": 728,
											"end": 742,
											"name": "LT"
										},
										{
											"begin": 714,
											"end": 1145,
											"name": "ISZERO"
										},
										{
											"begin": 714,
											"end": 1145,
											"name": "PUSH [tag]",
											"value": "17"
										},
										{
											"begin": 714,
											"end": 1145,
											"name": "JUMPI"
										},
										{
											"begin": 765,
											"end": 773,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 782,
											"end": 783,
											"name": "DUP8"
										},
										{
											"begin": 782,
											"end": 783,
											"name": "DUP8"
										},
										{
											"begin": 785,
											"end": 786,
											"name": "DUP6"
										},
										{
											"begin": 776,
											"end": 787,
											"name": "DUP2"
										},
										{
											"begin": 776,
											"end": 787,
											"name": "DUP2"
										},
										{
											"begin": 776,
											"end": 787,
											"name": "LT"
										},
										{
											"begin": 776,
											"end": 787,
											"name": "PUSH [tag]",
											"value": "19"
										},
										{
											"begin": 776,
											"end": 787,
											"name": "JUMPI"
										},
										{
											"begin": 776,
											"end": 787,
											"name": "INVALID"
										},
										{
											"begin": 776,
											"end": 787,
											"name": "tag",
											"value": "19"
										},
										{
											"begin": 776,
											"end": 787,
											"name": "JUMPDEST"
										},
										{
											"begin": 776,
											"end": 787,
											"name": "SWAP1"
										},
										{
											"begin": 776,
											"end": 787,
											"name": "POP"
										},
										{
											"begin": 776,
											"end": 787,
											"name": "ADD"
										},
										{
											"begin": 776,
											"end": 787,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 776,
											"end": 787,
											"name": "PUSH",
											"value": "F8"
										},
										{
											"begin": 776,
											"end": 787,
											"name": "SHR"
										},
										{
											"begin": 776,
											"end": 787,
											"name": "PUSH",
											"value": "F8"
										},
										{
											"begin": 776,
											"end": 787,
											"name": "SHL"
										},
										{
											"begin": 765,
											"end": 787,
											"name": "SWAP1"
										},
										{
											"begin": 765,
											"end": 787,
											"name": "POP"
										},
										{
											"begin": 809,
											"end": 813,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 805,
											"end": 813,
											"name": "PUSH",
											"value": "F8"
										},
										{
											"begin": 805,
											"end": 813,
											"name": "SHL"
										},
										{
											"begin": 805,
											"end": 806,
											"name": "DUP2"
										},
										{
											"begin": 805,
											"end": 813,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 805,
											"end": 813,
											"name": "NOT"
										},
										{
											"begin": 805,
											"end": 813,
											"name": "AND"
										},
										{
											"begin": 805,
											"end": 813,
											"name": "LT"
										},
										{
											"begin": 801,
											"end": 1135,
											"name": "ISZERO"
										},
										{
											"begin": 801,
											"end": 1135,
											"name": "PUSH [tag]",
											"value": "20"
										},
										{
											"begin": 801,
											"end": 1135,
											"name": "JUMPI"
										},
										{
											"begin": 838,
											"end": 839,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 833,
											"end": 839,
											"name": "DUP5"
										},
										{
											"begin": 833,
											"end": 839,
											"name": "ADD"
										},
										{
											"begin": 833,
											"end": 839,
											"name": "SWAP4"
										},
										{
											"begin": 833,
											"end": 839,
											"name": "POP"
										},
										{
											"begin": 801,
											"end": 1135,
											"name": "PUSH [tag]",
											"value": "21"
										},
										{
											"begin": 801,
											"end": 1135,
											"name": "JUMP"
										},
										{
											"begin": 801,
											"end": 1135,
											"name": "tag",
											"value": "20"
										},
										{
											"begin": 801,
											"end": 1135,
											"name": "JUMPDEST"
										},
										{
											"begin": 868,
											"end": 872,
											"name": "PUSH",
											"value": "E0"
										},
										{
											"begin": 864,
											"end": 872,
											"name": "PUSH",
											"value": "F8"
										},
										{
											"begin": 864,
											"end": 872,
											"name": "SHL"
										},
										{
											"begin": 864,
											"end": 865,
											"name": "DUP2"
										},
										{
											"begin": 864,
											"end": 872,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 864,
											"end": 872,
											"name": "NOT"
										},
										{
											"begin": 864,
											"end": 872,
											"name": "AND"
										},
										{
											"begin": 864,
											"end": 872,
											"name": "LT"
										},
										{
											"begin": 860,
											"end": 1135,
											"name": "ISZERO"
										},
										{
											"begin": 860,
											"end": 1135,
											"name": "PUSH [tag]",
											"value": "22"
										},
										{
											"begin": 860,
											"end": 1135,
											"name": "JUMPI"
										},
										{
											"begin": 897,
											"end": 898,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": 892,
											"end": 898,
											"name": "DUP5"
										},
										{
											"begin": 892,
											"end": 898,
											"name": "ADD"
										},
										{
											"begin": 892,
											"end": 898,
											"name": "SWAP4"
										},
										{
											"begin": 892,
											"end": 898,
											"name": "POP"
										},
										{
											"begin": 860,
											"end": 1135,
											"name": "PUSH [tag]",
											"value": "23"
										},
										{
											"begin": 860,
											"end": 1135,
											"name": "JUMP"
										},
										{
											"begin": 860,
											"end": 1135,
											"name": "tag",
											"value": "22"
										},
										{
											"begin": 860,
											"end": 1135,
											"name": "JUMPDEST"
										},
										{
											"begin": 927,
											"end": 931,
											"name": "PUSH",
											"value": "F0"
										},
										{
											"begin": 923,
											"end": 931,
											"name": "PUSH",
											"value": "F8"
										},
										{
											"begin": 923,
											"end": 931,
											"name": "SHL"
										},
										{
											"begin": 923,
											"end": 924,
											"name": "DUP2"
										},
										{
											"begin": 923,
											"end": 931,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 923,
											"end": 931,
											"name": "NOT"
										},
										{
											"begin": 923,
											"end": 931,
											"name": "AND"
										},
										{
											"begin": 923,
											"end": 931,
											"name": "LT"
										},
										{
											"begin": 919,
											"end": 1135,
											"name": "ISZERO"
										},
										{
											"begin": 919,
											"end": 1135,
											"name": "PUSH [tag]",
											"value": "24"
										},
										{
											"begin": 919,
											"end": 1135,
											"name": "JUMPI"
										},
										{
											"begin": 956,
											"end": 957,
											"name": "PUSH",
											"value": "3"
										},
										{
											"begin": 951,
											"end": 957,
											"name": "DUP5"
										},
										{
											"begin": 951,
											"end": 957,
											"name": "ADD"
										},
										{
											"begin": 951,
											"end": 957,
											"name": "SWAP4"
										},
										{
											"begin": 951,
											"end": 957,
											"name": "POP"
										},
										{
											"begin": 919,
											"end": 1135,
											"name": "PUSH [tag]",
											"value": "25"
										},
										{
											"begin": 919,
											"end": 1135,
											"name": "JUMP"
										},
										{
											"begin": 919,
											"end": 1135,
											"name": "tag",
											"value": "24"
										},
										{
											"begin": 919,
											"end": 1135,
											"name": "JUMPDEST"
										},
										{
											"begin": 986,
											"end": 990,
											"name": "PUSH",
											"value": "F8"
										},
										{
											"begin": 982,
											"end": 990,
											"name": "DUP1"
										},
										{
											"begin": 982,
											"end": 990,
											"name": "SHL"
										},
										{
											"begin": 982,
											"end": 983,
											"name": "DUP2"
										},
										{
											"begin": 982,
											"end": 990,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 982,
											"end": 990,
											"name": "NOT"
										},
										{
											"begin": 982,
											"end": 990,
											"name": "AND"
										},
										{
											"begin": 982,
											"end": 990,
											"name": "LT"
										},
										{
											"begin": 978,
											"end": 1135,
											"name": "ISZERO"
										},
										{
											"begin": 978,
											"end": 1135,
											"name": "PUSH [tag]",
											"value": "26"
										},
										{
											"begin": 978,
											"end": 1135,
											"name": "JUMPI"
										},
										{
											"begin": 1015,
											"end": 1016,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 1010,
											"end": 1016,
											"name": "DUP5"
										},
										{
											"begin": 1010,
											"end": 1016,
											"name": "ADD"
										},
										{
											"begin": 1010,
											"end": 1016,
											"name": "SWAP4"
										},
										{
											"begin": 1010,
											"end": 1016,
											"name": "POP"
										},
										{
											"begin": 978,
											"end": 1135,
											"name": "PUSH [tag]",
											"value": "27"
										},
										{
											"begin": 978,
											"end": 1135,
											"name": "JUMP"
										},
										{
											"begin": 978,
											"end": 1135,
											"name": "tag",
											"value": "26"
										},
										{
											"begin": 978,
											"end": 1135,
											"name": "JUMPDEST"
										},
										{
											"begin": 1045,
											"end": 1049,
											"name": "PUSH",
											"value": "FC"
										},
										{
											"begin": 1041,
											"end": 1049,
											"name": "PUSH",
											"value": "F8"
										},
										{
											"begin": 1041,
											"end": 1049,
											"name": "SHL"
										},
										{
											"begin": 1041,
											"end": 1042,
											"name": "DUP2"
										},
										{
											"begin": 1041,
											"end": 1049,
											"name": "PUSH",
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1041,
											"end": 1049,
											"name": "NOT"
										},
										{
											"begin": 1041,
											"end": 1049,
											"name": "AND"
										},
										{
											"begin": 1041,
											"end": 1049,
											"name": "LT"
										},
										{
											"begin": 1037,
											"end": 1135,
											"name": "ISZERO"
										},
										{
											"begin": 1037,
											"end": 1135,
											"name": "PUSH [tag]",
											"value": "28"
										},
										{
											"begin": 1037,
											"end": 1135,
											"name": "JUMPI"
										},
										{
											"begin": 1074,
											"end": 1075,
											"name": "PUSH",
											"value": "5"
										},
										{
											"begin": 1069,
											"end": 1075,
											"name": "DUP5"
										},
										{
											"begin": 1069,
											"end": 1075,
											"name": "ADD"
										},
										{
											"begin": 1069,
											"end": 1075,
											"name": "SWAP4"
										},
										{
											"begin": 1069,
											"end": 1075,
											"name": "POP"
										},
										{
											"begin": 1037,
											"end": 1135,
											"name": "PUSH [tag]",
											"value": "29"
										},
										{
											"begin": 1037,
											"end": 1135,
											"name": "JUMP"
										},
										{
											"begin": 1037,
											"end": 1135,
											"name": "tag",
											"value": "28"
										},
										{
											"begin": 1037,
											"end": 1135,
											"name": "JUMPDEST"
										},
										{
											"begin": 1119,
											"end": 1120,
											"name": "PUSH",
											"value": "6"
										},
										{
											"begin": 1114,
											"end": 1120,
											"name": "DUP5"
										},
										{
											"begin": 1114,
											"end": 1120,
											"name": "ADD"
										},
										{
											"begin": 1114,
											"end": 1120,
											"name": "SWAP4"
										},
										{
											"begin": 1114,
											"end": 1120,
											"name": "POP"
										},
										{
											"begin": 1037,
											"end": 1135,
											"name": "tag",
											"value": "29"
										},
										{
											"begin": 1037,
											"end": 1135,
											"name": "JUMPDEST"
										},
										{
											"begin": 978,
											"end": 1135,
											"name": "tag",
											"value": "27"
										},
										{
											"begin": 978,
											"end": 1135,
											"name": "JUMPDEST"
										},
										{
											"begin": 919,
											"end": 1135,
											"name": "tag",
											"value": "25"
										},
										{
											"begin": 919,
											"end": 1135,
											"name": "JUMPDEST"
										},
										{
											"begin": 860,
											"end": 1135,
											"name": "tag",
											"value": "23"
										},
										{
											"begin": 860,
											"end": 1135,
											"name": "JUMPDEST"
										},
										{
											"begin": 801,
											"end": 1135,
											"name": "tag",
											"value": "21"
										},
										{
											"begin": 801,
											"end": 1135,
											"name": "JUMPDEST"
										},
										{
											"begin": 714,
											"end": 1145,
											"name": "POP"
										},
										{
											"begin": 744,
											"end": 749,
											"name": "DUP4"
										},
										{
											"begin": 744,
											"end": 749,
											"name": "DUP1"
										},
										{
											"begin": 744,
											"end": 749,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 744,
											"end": 749,
											"name": "ADD"
										},
										{
											"begin": 744,
											"end": 749,
											"name": "SWAP5"
										},
										{
											"begin": 744,
											"end": 749,
											"name": "POP"
										},
										{
											"begin": 744,
											"end": 749,
											"name": "POP"
										},
										{
											"begin": 714,
											"end": 1145,
											"name": "PUSH [tag]",
											"value": "16"
										},
										{
											"begin": 714,
											"end": 1145,
											"name": "JUMP"
										},
										{
											"begin": 714,
											"end": 1145,
											"name": "tag",
											"value": "17"
										},
										{
											"begin": 714,
											"end": 1145,
											"name": "JUMPDEST"
										},
										{
											"begin": 1178,
											"end": 1179,
											"name": "PUSH",
											"value": "9"
										},
										{
											"begin": 1171,
											"end": 1174,
											"name": "DUP5"
										},
										{
											"begin": 1171,
											"end": 1179,
											"name": "EQ"
										},
										{
											"begin": 1164,
											"end": 1179,
											"name": "SWAP5"
										},
										{
											"begin": 1164,
											"end": 1179,
											"name": "POP"
										},
										{
											"begin": 1164,
											"end": 1179,
											"name": "POP"
										},
										{
											"begin": 1164,
											"end": 1179,
											"name": "POP"
										},
										{
											"begin": 1164,
											"end": 1179,
											"name": "POP"
										},
										{
											"begin": 1164,
											"end": 1179,
											"name": "POP"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "tag",
											"value": "10"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "JUMPDEST"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "SWAP3"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "SWAP2"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "POP"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "POP"
										},
										{
											"begin": 363,
											"end": 1186,
											"name": "JUMP",
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"strlen(string)": "367bbd78"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"}],\"name\":\"strlen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"strlen(string)\":{\"details\":\"Returns the length of a given string\",\"params\":{\"s\":\"The string to measure the length of\"},\"return\":\"The length of the input string\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/StringLength.sol\":\"StringLength\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/StringLength.sol\":{\"keccak256\":\"0xd6feb3e09a637bf1c85c606e506a437875f605af11e0d79f07ca363592ac6faa\",\"urls\":[\"bzz-raw://7497b69d65f19e4320e5fa0a13d1862efe1d451860f51b56b73c38b1bc3d6007\",\"dweb:/ipfs/QmTA56ErURbsdb8zYj1KEcrChizPdEqhQz6hUZ6Jvz4Uox\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"methods": {}
					}
				}
			}
		},
		"sources": {
			"contracts/StringLength.sol": {
				"ast": {
					"absolutePath": "contracts/StringLength.sol",
					"exportedSymbols": {
						"StringLength": [
							128
						]
					},
					"id": 129,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "141:23:0"
						},
						{
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 128,
							"linearizedBaseContracts": [
								128
							],
							"name": "StringLength",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 126,
										"nodeType": "Block",
										"src": "427:759:0",
										"statements": [
											{
												"assignments": [
													9
												],
												"declarations": [
													{
														"constant": false,
														"id": 9,
														"name": "len",
														"nodeType": "VariableDeclaration",
														"scope": 126,
														"src": "437:11:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 8,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "437:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 10,
												"initialValue": null,
												"nodeType": "VariableDeclarationStatement",
												"src": "437:11:0"
											},
											{
												"assignments": [
													12
												],
												"declarations": [
													{
														"constant": false,
														"id": 12,
														"name": "i",
														"nodeType": "VariableDeclaration",
														"scope": 126,
														"src": "458:9:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 11,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "458:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 14,
												"initialValue": {
													"argumentTypes": null,
													"hexValue": "30",
													"id": 13,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "470:1:0",
													"subdenomination": null,
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "458:13:0"
											},
											{
												"assignments": [
													16
												],
												"declarations": [
													{
														"constant": false,
														"id": 16,
														"name": "bytelength",
														"nodeType": "VariableDeclaration",
														"scope": 126,
														"src": "481:18:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 15,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "481:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 21,
												"initialValue": {
													"argumentTypes": null,
													"expression": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 18,
																"name": "s",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3,
																"src": "508:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_calldata_ptr",
																	"typeString": "string calldata"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_string_calldata_ptr",
																	"typeString": "string calldata"
																}
															],
															"id": 17,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "502:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																"typeString": "type(bytes storage pointer)"
															},
															"typeName": "bytes"
														},
														"id": 19,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "502:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_calldata_ptr",
															"typeString": "bytes calldata"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "length",
													"nodeType": "MemberAccess",
													"referencedDeclaration": null,
													"src": "502:15:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "481:36:0"
											},
											{
												"assignments": [
													23
												],
												"declarations": [
													{
														"constant": false,
														"id": 23,
														"name": "char",
														"nodeType": "VariableDeclaration",
														"scope": 126,
														"src": "527:11:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														},
														"typeName": {
															"id": 22,
															"name": "bytes1",
															"nodeType": "ElementaryTypeName",
															"src": "527:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes1",
																"typeString": "bytes1"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 29,
												"initialValue": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"id": 25,
																"name": "s",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3,
																"src": "547:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_calldata_ptr",
																	"typeString": "string calldata"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_string_calldata_ptr",
																	"typeString": "string calldata"
																}
															],
															"id": 24,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "541:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																"typeString": "type(bytes storage pointer)"
															},
															"typeName": "bytes"
														},
														"id": 26,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "541:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_calldata_ptr",
															"typeString": "bytes calldata"
														}
													},
													"id": 28,
													"indexExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 27,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "550:1:0",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "541:11:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "527:25:0"
											},
											{
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 48,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 38,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "578:31:0",
														"subExpression": {
															"argumentTypes": null,
															"components": [
																{
																	"argumentTypes": null,
																	"commonType": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"id": 36,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"argumentTypes": null,
																		"commonType": {
																			"typeIdentifier": "t_bytes1",
																			"typeString": "bytes1"
																		},
																		"id": 32,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"argumentTypes": null,
																			"id": 30,
																			"name": "char",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 23,
																			"src": "580:4:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes1",
																				"typeString": "bytes1"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"argumentTypes": null,
																			"hexValue": "30783431",
																			"id": 31,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "588:4:0",
																			"subdenomination": null,
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_65_by_1",
																				"typeString": "int_const 65"
																			},
																			"value": "0x41"
																		},
																		"src": "580:12:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "&&",
																	"rightExpression": {
																		"argumentTypes": null,
																		"commonType": {
																			"typeIdentifier": "t_bytes1",
																			"typeString": "bytes1"
																		},
																		"id": 35,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"argumentTypes": null,
																			"id": 33,
																			"name": "char",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 23,
																			"src": "596:4:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes1",
																				"typeString": "bytes1"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<=",
																		"rightExpression": {
																			"argumentTypes": null,
																			"hexValue": "30783541",
																			"id": 34,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "604:4:0",
																			"subdenomination": null,
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_90_by_1",
																				"typeString": "int_const 90"
																			},
																			"value": "0x5A"
																		},
																		"src": "596:12:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"src": "580:28:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																}
															],
															"id": 37,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "579:30:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"argumentTypes": null,
														"id": 47,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "631:31:0",
														"subExpression": {
															"argumentTypes": null,
															"components": [
																{
																	"argumentTypes": null,
																	"commonType": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"id": 45,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"argumentTypes": null,
																		"commonType": {
																			"typeIdentifier": "t_bytes1",
																			"typeString": "bytes1"
																		},
																		"id": 41,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"argumentTypes": null,
																			"id": 39,
																			"name": "char",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 23,
																			"src": "633:4:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes1",
																				"typeString": "bytes1"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"argumentTypes": null,
																			"hexValue": "30783631",
																			"id": 40,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "641:4:0",
																			"subdenomination": null,
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_97_by_1",
																				"typeString": "int_const 97"
																			},
																			"value": "0x61"
																		},
																		"src": "633:12:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "&&",
																	"rightExpression": {
																		"argumentTypes": null,
																		"commonType": {
																			"typeIdentifier": "t_bytes1",
																			"typeString": "bytes1"
																		},
																		"id": 44,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"argumentTypes": null,
																			"id": 42,
																			"name": "char",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 23,
																			"src": "649:4:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes1",
																				"typeString": "bytes1"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<=",
																		"rightExpression": {
																			"argumentTypes": null,
																			"hexValue": "30783741",
																			"id": 43,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "657:4:0",
																			"subdenomination": null,
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_122_by_1",
																				"typeString": "int_const 122"
																			},
																			"value": "0x7A"
																		},
																		"src": "649:12:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"src": "633:28:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																}
															],
															"id": 46,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "632:30:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "578:84:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 51,
												"nodeType": "IfStatement",
												"src": "562:141:0",
												"trueBody": {
													"expression": {
														"argumentTypes": null,
														"hexValue": "66616c7365",
														"id": 49,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "698:5:0",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"functionReturnParameters": 7,
													"id": 50,
													"nodeType": "Return",
													"src": "691:12:0"
												}
											},
											{
												"body": {
													"id": 120,
													"nodeType": "Block",
													"src": "751:394:0",
													"statements": [
														{
															"assignments": [
																63
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 63,
																	"name": "b",
																	"nodeType": "VariableDeclaration",
																	"scope": 120,
																	"src": "765:8:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	},
																	"typeName": {
																		"id": 62,
																		"name": "bytes1",
																		"nodeType": "ElementaryTypeName",
																		"src": "765:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes1",
																			"typeString": "bytes1"
																		}
																	},
																	"value": null,
																	"visibility": "internal"
																}
															],
															"id": 69,
															"initialValue": {
																"argumentTypes": null,
																"baseExpression": {
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"id": 65,
																			"name": "s",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3,
																			"src": "782:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_calldata_ptr",
																				"typeString": "string calldata"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_calldata_ptr",
																				"typeString": "string calldata"
																			}
																		],
																		"id": 64,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "776:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": "bytes"
																	},
																	"id": 66,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "776:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_calldata_ptr",
																		"typeString": "bytes calldata"
																	}
																},
																"id": 68,
																"indexExpression": {
																	"argumentTypes": null,
																	"id": 67,
																	"name": "i",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 12,
																	"src": "785:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "776:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "765:22:0"
														},
														{
															"condition": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																},
																"id": 72,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"id": 70,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 63,
																	"src": "805:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"argumentTypes": null,
																	"hexValue": "30783830",
																	"id": 71,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "809:4:0",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "0x80"
																},
																"src": "805:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"condition": {
																	"argumentTypes": null,
																	"commonType": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	},
																	"id": 80,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"argumentTypes": null,
																		"id": 78,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 63,
																		"src": "864:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes1",
																			"typeString": "bytes1"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<",
																	"rightExpression": {
																		"argumentTypes": null,
																		"hexValue": "30784530",
																		"id": 79,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "868:4:0",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_224_by_1",
																			"typeString": "int_const 224"
																		},
																		"value": "0xE0"
																	},
																	"src": "864:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseBody": {
																	"condition": {
																		"argumentTypes": null,
																		"commonType": {
																			"typeIdentifier": "t_bytes1",
																			"typeString": "bytes1"
																		},
																		"id": 88,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"argumentTypes": null,
																			"id": 86,
																			"name": "b",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 63,
																			"src": "923:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes1",
																				"typeString": "bytes1"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<",
																		"rightExpression": {
																			"argumentTypes": null,
																			"hexValue": "30784630",
																			"id": 87,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "927:4:0",
																			"subdenomination": null,
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_240_by_1",
																				"typeString": "int_const 240"
																			},
																			"value": "0xF0"
																		},
																		"src": "923:8:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"falseBody": {
																		"condition": {
																			"argumentTypes": null,
																			"commonType": {
																				"typeIdentifier": "t_bytes1",
																				"typeString": "bytes1"
																			},
																			"id": 96,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"argumentTypes": null,
																				"id": 94,
																				"name": "b",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 63,
																				"src": "982:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes1",
																					"typeString": "bytes1"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "<",
																			"rightExpression": {
																				"argumentTypes": null,
																				"hexValue": "30784638",
																				"id": 95,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "986:4:0",
																				"subdenomination": null,
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_248_by_1",
																					"typeString": "int_const 248"
																				},
																				"value": "0xF8"
																			},
																			"src": "982:8:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseBody": {
																			"condition": {
																				"argumentTypes": null,
																				"commonType": {
																					"typeIdentifier": "t_bytes1",
																					"typeString": "bytes1"
																				},
																				"id": 104,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"argumentTypes": null,
																					"id": 102,
																					"name": "b",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 63,
																					"src": "1041:1:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes1",
																						"typeString": "bytes1"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"argumentTypes": null,
																					"hexValue": "30784643",
																					"id": 103,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "1045:4:0",
																					"subdenomination": null,
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_252_by_1",
																						"typeString": "int_const 252"
																					},
																					"value": "0xFC"
																				},
																				"src": "1041:8:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"falseBody": {
																				"id": 114,
																				"nodeType": "Block",
																				"src": "1096:39:0",
																				"statements": [
																					{
																						"expression": {
																							"argumentTypes": null,
																							"id": 112,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftHandSide": {
																								"argumentTypes": null,
																								"id": 110,
																								"name": "i",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 12,
																								"src": "1114:1:0",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "Assignment",
																							"operator": "+=",
																							"rightHandSide": {
																								"argumentTypes": null,
																								"hexValue": "36",
																								"id": 111,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "number",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "1119:1:0",
																								"subdenomination": null,
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_6_by_1",
																									"typeString": "int_const 6"
																								},
																								"value": "6"
																							},
																							"src": "1114:6:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"id": 113,
																						"nodeType": "ExpressionStatement",
																						"src": "1114:6:0"
																					}
																				]
																			},
																			"id": 115,
																			"nodeType": "IfStatement",
																			"src": "1037:98:0",
																			"trueBody": {
																				"id": 109,
																				"nodeType": "Block",
																				"src": "1051:39:0",
																				"statements": [
																					{
																						"expression": {
																							"argumentTypes": null,
																							"id": 107,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftHandSide": {
																								"argumentTypes": null,
																								"id": 105,
																								"name": "i",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 12,
																								"src": "1069:1:0",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "Assignment",
																							"operator": "+=",
																							"rightHandSide": {
																								"argumentTypes": null,
																								"hexValue": "35",
																								"id": 106,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "number",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "1074:1:0",
																								"subdenomination": null,
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_5_by_1",
																									"typeString": "int_const 5"
																								},
																								"value": "5"
																							},
																							"src": "1069:6:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"id": 108,
																						"nodeType": "ExpressionStatement",
																						"src": "1069:6:0"
																					}
																				]
																			}
																		},
																		"id": 116,
																		"nodeType": "IfStatement",
																		"src": "978:157:0",
																		"trueBody": {
																			"id": 101,
																			"nodeType": "Block",
																			"src": "992:39:0",
																			"statements": [
																				{
																					"expression": {
																						"argumentTypes": null,
																						"id": 99,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftHandSide": {
																							"argumentTypes": null,
																							"id": 97,
																							"name": "i",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 12,
																							"src": "1010:1:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						},
																						"nodeType": "Assignment",
																						"operator": "+=",
																						"rightHandSide": {
																							"argumentTypes": null,
																							"hexValue": "34",
																							"id": 98,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "number",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "1015:1:0",
																							"subdenomination": null,
																							"typeDescriptions": {
																								"typeIdentifier": "t_rational_4_by_1",
																								"typeString": "int_const 4"
																							},
																							"value": "4"
																						},
																						"src": "1010:6:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"id": 100,
																					"nodeType": "ExpressionStatement",
																					"src": "1010:6:0"
																				}
																			]
																		}
																	},
																	"id": 117,
																	"nodeType": "IfStatement",
																	"src": "919:216:0",
																	"trueBody": {
																		"id": 93,
																		"nodeType": "Block",
																		"src": "933:39:0",
																		"statements": [
																			{
																				"expression": {
																					"argumentTypes": null,
																					"id": 91,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftHandSide": {
																						"argumentTypes": null,
																						"id": 89,
																						"name": "i",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 12,
																						"src": "951:1:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "Assignment",
																					"operator": "+=",
																					"rightHandSide": {
																						"argumentTypes": null,
																						"hexValue": "33",
																						"id": 90,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "956:1:0",
																						"subdenomination": null,
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_3_by_1",
																							"typeString": "int_const 3"
																						},
																						"value": "3"
																					},
																					"src": "951:6:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"id": 92,
																				"nodeType": "ExpressionStatement",
																				"src": "951:6:0"
																			}
																		]
																	}
																},
																"id": 118,
																"nodeType": "IfStatement",
																"src": "860:275:0",
																"trueBody": {
																	"id": 85,
																	"nodeType": "Block",
																	"src": "874:39:0",
																	"statements": [
																		{
																			"expression": {
																				"argumentTypes": null,
																				"id": 83,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftHandSide": {
																					"argumentTypes": null,
																					"id": 81,
																					"name": "i",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 12,
																					"src": "892:1:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "Assignment",
																				"operator": "+=",
																				"rightHandSide": {
																					"argumentTypes": null,
																					"hexValue": "32",
																					"id": 82,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "897:1:0",
																					"subdenomination": null,
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_2_by_1",
																						"typeString": "int_const 2"
																					},
																					"value": "2"
																				},
																				"src": "892:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"id": 84,
																			"nodeType": "ExpressionStatement",
																			"src": "892:6:0"
																		}
																	]
																}
															},
															"id": 119,
															"nodeType": "IfStatement",
															"src": "801:334:0",
															"trueBody": {
																"id": 77,
																"nodeType": "Block",
																"src": "815:39:0",
																"statements": [
																	{
																		"expression": {
																			"argumentTypes": null,
																			"id": 75,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"argumentTypes": null,
																				"id": 73,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 12,
																				"src": "833:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "+=",
																			"rightHandSide": {
																				"argumentTypes": null,
																				"hexValue": "31",
																				"id": 74,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "838:1:0",
																				"subdenomination": null,
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "833:6:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 76,
																		"nodeType": "ExpressionStatement",
																		"src": "833:6:0"
																	}
																]
															}
														}
													]
												},
												"condition": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 58,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 56,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 12,
														"src": "728:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"argumentTypes": null,
														"id": 57,
														"name": "bytelength",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 16,
														"src": "732:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "728:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 121,
												"initializationExpression": {
													"expression": {
														"argumentTypes": null,
														"id": 54,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftHandSide": {
															"argumentTypes": null,
															"id": 52,
															"name": "len",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 9,
															"src": "719:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "Assignment",
														"operator": "=",
														"rightHandSide": {
															"argumentTypes": null,
															"hexValue": "30",
															"id": 53,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "725:1:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "719:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 55,
													"nodeType": "ExpressionStatement",
													"src": "719:7:0"
												},
												"loopExpression": {
													"expression": {
														"argumentTypes": null,
														"id": 60,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "744:5:0",
														"subExpression": {
															"argumentTypes": null,
															"id": 59,
															"name": "len",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 9,
															"src": "744:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 61,
													"nodeType": "ExpressionStatement",
													"src": "744:5:0"
												},
												"nodeType": "ForStatement",
												"src": "714:431:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 124,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 122,
														"name": "len",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 9,
														"src": "1171:3:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "39",
														"id": 123,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1178:1:0",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_9_by_1",
															"typeString": "int_const 9"
														},
														"value": "9"
													},
													"src": "1171:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 7,
												"id": 125,
												"nodeType": "Return",
												"src": "1164:15:0"
											}
										]
									},
									"documentation": "@dev Returns the length of a given string\n     * @param s The string to measure the length of\n@return The length of the input string",
									"id": 127,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "strlen",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3,
												"name": "s",
												"nodeType": "VariableDeclaration",
												"scope": 127,
												"src": "379:17:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "379:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "378:19:0"
									},
									"returnParameters": {
										"id": 7,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 6,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 127,
												"src": "421:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 5,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "421:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "420:6:0"
									},
									"scope": 128,
									"src": "363:823:0",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "external"
								}
							],
							"scope": 129,
							"src": "165:1023:0"
						}
					],
					"src": "141:1047:0"
				},
				"id": 0
			}
		}
	}
}